name: Generate & Deploy Site

on:
  push:
    branches: ["main"]
    # Removed path filters so the workflow will trigger on ANY change to main.
    # If you want to limit again, add a paths: section. (Original filters caused
    # confusion when changing only other files like README/docs.)
  workflow_dispatch:
    inputs:
      article_limit:
        description: "Override ARTICLE_LIMIT (optional)"
        required: false
        type: string
  repository_dispatch:
    types: [deploy-site]

permissions:
  contents: write   # we commit docs if changed
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Sanity start
        run: echo "Workflow initialized at $(date -u +'%Y-%m-%dT%H:%M:%SZ') on commit $GITHUB_SHA"
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive ARTICLE_LIMIT from inputs/payload
        id: derive_limit
        run: |
          LIMIT=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.article_limit }}" ]]; then
            LIMIT="${{ inputs.article_limit }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            # Try to extract from client_payload JSON (GitHub places it in the event file)
            EVENT_FILE="$GITHUB_EVENT_PATH"
            if grep -q 'article_limit' "$EVENT_FILE"; then
              LIMIT=$(jq -r '.client_payload.article_limit // empty' "$EVENT_FILE")
            fi
          fi
          if [[ -n "$LIMIT" ]]; then
            echo "Using ARTICLE_LIMIT=$LIMIT"
            echo "ARTICLE_LIMIT=$LIMIT" >> $GITHUB_ENV
          else
            echo "No ARTICLE_LIMIT override provided"
          fi
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo_mysql
          coverage: none
      - name: Generate content (PHP build)
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
          ARTICLE_LIMIT: ${{ env.ARTICLE_LIMIT }}
        run: php scripts/build_articles.php || echo "Build script exited with code $? (continuing to deploy)"

      - name: Commit updated docs (if changed)
        run: |
          if [[ -n $(git status --porcelain docs/) ]]; then
            git config user.name 'github-actions'
            git config user.email 'actions@users.noreply.github.com'
            git add docs/
            git commit -m "content: refresh $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true
            echo "Attempting fast-forward safe push"
            git fetch origin main
            # Rebase to avoid merge commits; if it fails we abort and push with force-with-lease as last resort
            if git rebase origin/main; then
              git push origin HEAD:main || true
            else
              echo "Rebase failed; aborting and using force-with-lease"
              git rebase --abort || true
              git push --force-with-lease origin HEAD:main || true
            fi
          else
            echo 'No doc changes to commit.'
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll (source=docs)
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # Deploy Pages artifact